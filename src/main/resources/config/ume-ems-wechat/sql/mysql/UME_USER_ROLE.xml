<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.umeframework.auth.uac.entity">
  <!-- UME用户角色关系表 [UME_USER_ROLE] -->
  
  <!-- Insert one -->
  <insert id="UME_USER_ROLE_INSERT" parameterType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    INSERT INTO UME_USER_ROLE (
      USER_ID,
      ROLE_ID,
      CREATE_AUTHOR,
      CREATE_DATETIME,
      UPDATE_AUTHOR,
      UPDATE_DATETIME
    ) VALUES (
      #{userId},
      #{roleId},
      #{createAuthor},
      current_timestamp(),
      #{updateAuthor},
      current_timestamp()
    )
  </insert>

  <!-- Update with optimism check) -->
  <update id="UME_USER_ROLE_UPDATE" parameterType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    UPDATE UME_USER_ROLE
    SET
      CREATE_AUTHOR = #{createAuthor},
      CREATE_DATETIME = #{createDatetime},
      UPDATE_AUTHOR = #{updateAuthor},
      UPDATE_DATETIME = current_timestamp() 
    WHERE UPDATE_DATETIME = #{updateDatetime}
      AND USER_ID = #{userId}
      AND ROLE_ID = #{roleId}
      <if test="updateDatetime!=null"> AND UPDATE_DATETIME = #{updateDatetime}</if>
  </update>

  <!-- Smart update -->
  <update id="UME_USER_ROLE_SMART_UPDATE" parameterType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    UPDATE UME_USER_ROLE
    <set>
      <if test="createAuthor!=null">CREATE_AUTHOR = #{createAuthor},</if>
      <if test="createDatetime!=null">CREATE_DATETIME = #{createDatetime},</if>
      <if test="updateAuthor!=null">UPDATE_AUTHOR = #{updateAuthor},</if>
      UPDATE_DATETIME = current_timestamp()
    </set>
    WHERE 
       USER_ID = #{userId}
       AND  ROLE_ID = #{roleId}
      <if test="updateDatetime!=null"> AND UPDATE_DATETIME = #{updateDatetime}</if>
  </update>
  
  <!-- Delete one -->
  <delete id="UME_USER_ROLE_DELETE" parameterType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    DELETE FROM UME_USER_ROLE
    WHERE
      USER_ID = #{userId} AND 
      ROLE_ID = #{roleId} 
  </delete>

  <!-- Find by primary key -->
  <select id="UME_USER_ROLE_FIND" resultType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    SELECT
      USER_ID AS "userId",
      ROLE_ID AS "roleId",
      CREATE_AUTHOR AS "createAuthor",
      CREATE_DATETIME AS "createDatetime",
      UPDATE_AUTHOR AS "updateAuthor",
      UPDATE_DATETIME AS "updateDatetime"
    FROM UME_USER_ROLE
    WHERE
      USER_ID = #{userId} AND 
      ROLE_ID = #{roleId} 
  </select>

  <!-- Find by primary key for update with row lock -->
  <select id="UME_USER_ROLE_FIND_FOR_UPDATE" resultType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    SELECT
      USER_ID AS "userId",
      ROLE_ID AS "roleId",
      CREATE_AUTHOR AS "createAuthor",
      CREATE_DATETIME AS "createDatetime",
      UPDATE_AUTHOR AS "updateAuthor",
      UPDATE_DATETIME AS "updateDatetime"
    FROM UME_USER_ROLE
    WHERE
      USER_ID = #{userId} AND 
      ROLE_ID = #{roleId} 
    FOR UPDATE
  </select>

  <!-- Search -->
  <select id="UME_USER_ROLE_SEARCH" resultType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    SELECT
      USER_ID AS "userId",
      ROLE_ID AS "roleId",
      CREATE_AUTHOR AS "createAuthor",
      CREATE_DATETIME AS "createDatetime",
      UPDATE_AUTHOR AS "updateAuthor",
      UPDATE_DATETIME AS "updateDatetime"
    FROM UME_USER_ROLE
    WHERE 1 = 1 
      <if test="userId != null">AND USER_ID = #{userId}</if>
      <if test="roleId != null">AND ROLE_ID = #{roleId}</if>
      <if test="createAuthor != null">AND CREATE_AUTHOR = #{createAuthor}</if>
      <if test="updateAuthor != null">AND UPDATE_AUTHOR = #{updateAuthor}</if>
      <if test="createDatetime != null">AND CREATE_DATETIME &gt; #{createDatetime}</if>
      <if test="updateDatetime != null">AND UPDATE_DATETIME &gt; #{updateDatetime}</if>
    <if test="theOrderByCondition != null"> ORDER BY ${theOrderByCondition}</if>
    <if test="theGroupByCondition != null"> GROUP BY ${theGroupByCondition}</if>
    <if test="theFetchSize != null">LIMIT ${theFetchStart} , ${theFetchSize}</if>
  </select>

  <!-- Like Search -->
  <select id="UME_USER_ROLE_LIKE_SEARCH" resultType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    SELECT
      USER_ID AS "userId",
      ROLE_ID AS "roleId",
      CREATE_AUTHOR AS "createAuthor",
      CREATE_DATETIME AS "createDatetime",
      UPDATE_AUTHOR AS "updateAuthor",
      UPDATE_DATETIME AS "updateDatetime"
    FROM UME_USER_ROLE
    WHERE 1 = 1 
      <if test="userId != null">AND USER_ID LIKE CONCAT('%', #{userId}, '%')</if>
      <if test="roleId != null">AND ROLE_ID LIKE CONCAT('%', #{roleId}, '%')</if>
      <if test="createAuthor != null">AND CREATE_AUTHOR LIKE CONCAT('%', #{createAuthor}, '%')</if>
      <if test="updateAuthor != null">AND UPDATE_AUTHOR LIKE CONCAT('%', #{updateAuthor}, '%')</if>
      <if test="createDatetime != null">AND CREATE_DATETIME &gt; #{createDatetime}</if>
      <if test="updateDatetime != null">AND UPDATE_DATETIME &gt; #{updateDatetime}</if>
    <if test="theOrderByCondition != null"> ORDER BY ${theOrderByCondition}</if>
    <if test="theGroupByCondition != null"> GROUP BY ${theGroupByCondition}</if>
    <if test="theFetchSize != null">LIMIT ${theFetchStart} , ${theFetchSize}</if>    
  </select>
  
  <!-- Dynamic Search -->
  <select id="UME_USER_ROLE_DYNA_SEARCH" resultType="org.umeframework.auth.uac.entity.UmeUserRoleDto">
    SELECT
      USER_ID AS "userId",
      ROLE_ID AS "roleId",
      CREATE_AUTHOR AS "createAuthor",
      CREATE_DATETIME AS "createDatetime",
      UPDATE_AUTHOR AS "updateAuthor",
      UPDATE_DATETIME AS "updateDatetime"
    FROM UME_USER_ROLE
    WHERE 1 = 1 
      <if test="userId != null">AND ( ${userId} )</if>
      <if test="roleId != null">AND ( ${roleId} )</if>
      <if test="theSQLCondition != null"> AND ( ${theSQLCondition} )</if>
      <if test="theOrderByCondition != null"> ORDER BY ${theOrderByCondition}</if>
      <if test="theGroupByCondition != null"> GROUP BY ${theGroupByCondition}</if>
      <if test="theFetchSize != null">LIMIT ${theFetchStart} , ${theFetchSize}</if>
  </select>
  
  <!-- Count by input condition -->
  <select id="UME_USER_ROLE_COUNT" resultType="java.lang.Integer">
    SELECT count(*)
    FROM UME_USER_ROLE
    WHERE 1 = 1 
      <if test="theSQLCondition != null"> AND ( ${theSQLCondition} )</if>
      <if test="userId != null">AND USER_ID = #{userId}</if>
      <if test="roleId != null">AND ROLE_ID = #{roleId}</if>
  </select>

</mapper>

